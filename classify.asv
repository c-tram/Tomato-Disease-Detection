% Load and prepare your image dataset
pathToImages = imageDatastore('./', 'IncludeSubfolders', true, 'LabelSource', 'foldernames');
[trainingSet, validationSet] = splitEachLabel(pathToImages, 0.8, 'randomized');

targetSize = [100 100];

% Extract features from our image dataset
features = {'Area', 'Perimeter', 'Eccentricity', 'ConvexArea', 'Solidity', 'EulerNumber'};
textureFeatures = {'Contrast', 'Correlation', 'Energy', 'Homogeneity'};

trainingFeatures = zeros(length(trainingSet.Files), length(features) + length(textureFeatures));
for i = 1:length(trainingSet.Files)
    img = imread(trainingSet.Files{i});

    img = imresize(img,targetSize);
    
    % Compute the texture features of the image using the Gray-Level Co-Occurrence Matrix (GLCM)
    gray = rgb2gray(img);
    offsets = [0 1; -1 1; -1 0; -1 -1];
    glcm = graycomatrix(gray, 'Offset', offsets);
    statsTexture = graycoprops(glcm, textureFeatures);
    
    % Compute the geometric features of the image
    mask = gray2ind(gray);
    statsGeometric = regionprops('table', mask, features);
    
    % Combine the texture and geometric features into a single feature vector
trainingFeatures(i,:) = [mean(statsGeometric{:,:}, 'omitnan') mean(structfun(@mean, statsTexture{:,:}))];
end
trainingLabels = trainingSet.Labels;

% Train our classifier
ourClassifier = fitcecoc(trainingFeatures, trainingLabels);

% Evaluate our classifier
validationFeatures = zeros(length(validationSet.Files), length(features) + length(textureFeatures));
for i = 1:length(validationSet.Files)
   img = imread(validationSet.Files{i});
    
    % Compute the texture features of the image using the Gray-Level Co-Occurrence Matrix (GLCM)
    gray = rgb2gray(img);
    offsets = [0 1; -1 1; -1 0; -1 -1];
    glcm = graycomatrix(gray, 'Offset', offsets);
    statsTexture = graycoprops(glcm, textureFeatures);
    
    % Compute the geometric features of the image
    mask = gray2ind(gray);
    statsGeometric = regionprops('table', mask, features);
    
    % Combine the texture and geometric features into a single feature vector
    validationFeatures(i,:) = [mean(statsGeometric{:,:}, 'omitnan') mean(struct2table(statsTexture))];
end
validationLabels = validationSet.Labels;
predictedLabels = predict(ourClassifier, validationFeatures);
accuracy = mean(predictedLabels == validationLabels);

% Save classifier
save('Classifier.mat', 'ourClassifier');
